name: CI
env:
  DEBUG: napi:*
  APP_NAME: node-fast-sha
  MACOSX_DEPLOYMENT_TARGET: "10.13"
on:
  push:
    branches:
      - main
    tags-ignore:
      - "**"
    paths-ignore:
      - "**/*.md"
      - LICENSE
      - "**/*.gitignore"
      - .editorconfig
      - docs/**
  workflow_dispatch:
    inputs:
      force_build_binaries:
        type: boolean
        description: Do you want to force-build the binaries (regardless of publish step)?

jobs:
  publish:
    name: Publish
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Setup node
        uses: actions/setup-node@v3
        with:
          node-version: 18
          check-latest: true
          cache: yarn
      - name: Install JS dependencies
        run: yarn install
      - name: Install Rust dependencies
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
      - name: Cache cargo
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            .cargo-cache
            target/
          key: publish-cargo-cache
      - name: Build library
        run: set -e && yarn build && strip ./*.node
      - name: List files
        run: ls -al && ls -al lib
      - name: PR or Publish
        id: changesets
        uses: changesets/action@v1
        with:
          version: yarn run version
          publish: yarn run changeset publish
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}


  build:
#    if: needs.publish.outputs.published || github.event.inputs.force_build_binaries
    needs: publish
    name: Build
    runs-on: ubuntu-latest
    steps:
      - name: Testing output
        run: echo ${{ needs.publish.outputs.published && 'IS PUBLISHED' || 'NOT PUBLISHED' }}

#    strategy:
#      fail-fast: false
#      matrix:
#        # Use getBinaryName from install/binary to determine output_name here.
#        settings:
#          - host: macos-latest
#            target: x86_64-apple-darwin
#            output_name: darwin-x64
#            build: |
#              yarn build
#              strip -x ./*.node
#          - host: macos-latest
#            target: aarch64-apple-darwin
#            output_name: darwin-arm64
#            build: |
#              yarn build --target aarch64-apple-darwin
#              strip -x ./*.node
##          - host: windows-latest
##            build: yarn build
##            target: x86_64-pc-windows-msvc
#          - host: ubuntu-latest
#            target: x86_64-unknown-linux-gnu
#            docker: ghcr.io/napi-rs/napi-rs/nodejs-rust:lts-debian
#            output_name: linux-x64-gnu
#            output_suffix: linux-x64-gnu
#            build: |-
#              set -e &&
#              yarn build --target x86_64-unknown-linux-gnu &&
#              strip ./*.node
#    name: stable - ${{ matrix.settings.target }} - node@18
#    runs-on: ${{ matrix.settings.host }}
#    steps:
#      - uses: actions/checkout@v3
#      - name: Setup node
#        uses: actions/setup-node@v3
#        if: ${{ !matrix.settings.docker }}
#        with:
#          node-version: 18
#          check-latest: true
#          cache: yarn
#      - name: Install
#        uses: dtolnay/rust-toolchain@stable
#        if: ${{ !matrix.settings.docker }}
#        with:
#          toolchain: stable
#          targets: ${{ matrix.settings.target }}
#      - name: Cache cargo
#        uses: actions/cache@v3
#        with:
#          path: |
#            ~/.cargo/registry/index/
#            ~/.cargo/registry/cache/
#            ~/.cargo/git/db/
#            .cargo-cache
#            target/
#          key: ${{ matrix.settings.target }}-cargo-${{ matrix.settings.host }}
#      - uses: goto-bus-stop/setup-zig@v2
#        if: ${{ matrix.settings.target == 'armv7-unknown-linux-gnueabihf' }}
#        with:
#          version: 0.10.1
#      - name: Setup toolchain
#        run: ${{ matrix.settings.setup }}
#        if: ${{ matrix.settings.setup }}
#        shell: bash
#      - name: Setup node x86
#        if: matrix.settings.target == 'i686-pc-windows-msvc'
#        run: yarn config set supportedArchitectures.cpu "ia32"
#        shell: bash
#      - name: Install dependencies
#        run: yarn install
#      - name: Setup node x86
#        uses: actions/setup-node@v3
#        if: matrix.settings.target == 'i686-pc-windows-msvc'
#        with:
#          node-version: 18
#          check-latest: true
#          cache: yarn
#          architecture: x86
#      - name: Build in docker
#        uses: addnab/docker-run-action@v3
#        if: ${{ matrix.settings.docker }}
#        with:
#          image: ${{ matrix.settings.docker }}
#          options: "--user 0:0 -v ${{ github.workspace }}/.cargo-cache/git/db:/usr/local/cargo/git/db -v ${{ github.workspace }}/.cargo/registry/cache:/usr/local/cargo/registry/cache -v ${{ github.workspace }}/.cargo/registry/index:/usr/local/cargo/registry/index -v ${{ github.workspace }}:/build -w /build"
#          run: ${{ matrix.settings.build }}
#      - name: Build
#        run: ${{ matrix.settings.build }}
#        if: ${{ !matrix.settings.docker }}
#      - name: Get Package Version
#        run: echo "JS_PACKAGE_VERSION=$(node -p 'require("./package.json").version')" >> $GITHUB_ENV
#      - name: List package version
#        run: echo ${{ env.JS_PACKAGE_VERSION }}
#      - name: Rename artifact
#        run: mv ${{ env.APP_NAME }}.node ${{ env.APP_NAME}}-v${{ env.JS_PACKAGE_VERSION }}-${{ matrix.settings.output_name}}.node
#        shell: bash
#      - name: List again
#        run: ls -al
#      - name: Upload artifact
#        run: gh release upload v${{ env.JS_PACKAGE_VERSION }} ${{ env.APP_NAME}}-v${{ env.JS_PACKAGE_VERSION }}-${{ matrix.settings.output_name}}.node --clobber
#        env:
#          GH_TOKEN: ${{ github.token }}

