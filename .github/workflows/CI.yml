name: CI
env:
  DEBUG: napi:*
  APP_NAME: node-fast-sha
  MACOSX_DEPLOYMENT_TARGET: "10.13"
on:
#  push:
#    branches:
#      - main
#    tags-ignore:
#      - "**"
#    paths-ignore:
#      - LICENSE
#      - "**/*.gitignore"
#      - .editorconfig
  workflow_dispatch:
    inputs:
      force_build_binaries:
        type: boolean
        description: Do you want to force-build the binaries (regardless of publish step)?

jobs:
  publish:
    name: Publish
    runs-on: ubuntu-latest
    outputs:
        published: ${{ steps.changesets.outputs.published }}
    steps:
      - uses: actions/checkout@v3
      - name: Setup node
        uses: actions/setup-node@v3
        with:
          node-version: 18
          check-latest: true
          cache: yarn
      - name: Install JS dependencies
        run: yarn install
      - name: Install Rust dependencies
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
      - name: Cache cargo
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            .cargo-cache
            target/
          key: publish-cargo-cache
      - name: Build library
        run: set -e && yarn build && strip ./*.node
      - name: PR or Publish
        id: changesets
        uses: changesets/action@v1
        with:
          version: yarn run version
          publish: yarn run changeset publish
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}


  build:
    if: needs.publish.outputs.published == 'true' || github.event.inputs.force_build_binaries
    needs: publish
    strategy:
      fail-fast: false
      matrix:
        # Use getBinaryName from install/binary to determine output_name here.
        settings:
#          - output_name: darwin-x64
#            host: macos-latest
#            target: x86_64-apple-darwin
#            build: |
#              yarn build
#              strip -x ./*.node

#          - output_name: darwin-arm64
#            host: macos-latest
#            target: aarch64-apple-darwin
#            build: |
#              yarn build --target aarch64-apple-darwin
#              strip -x ./*.node

#          - output_name: win32-x64-msvc
#            host: windows-latest
#            build: yarn build
#            target: x86_64-pc-windows-msvc

            # Needs test
#          - output_name: win32-ia32-msvc
#            host: windows-latest
#            build: yarn build --target i686-pc-windows-msvc
#            target: i686-pc-windows-msvc

            # Needs test
#          - output_name: win32-arm64-msvc
#            host: windows-latest
#            target: aarch64-pc-windows-msvc
#            build: yarn build --target aarch64-pc-windows-msvc

#          - output_name: linux-x64-gnu
#            host: ubuntu-latest
#            target: x86_64-unknown-linux-gnu
#            docker: ghcr.io/napi-rs/napi-rs/nodejs-rust:lts-debian
#            build: |-
#              set -e &&
#              yarn build --target x86_64-unknown-linux-gnu &&
#              strip ./*.node

#          - output_name: linux-x64-musl
#            host: ubuntu-latest
#            target: x86_64-unknown-linux-musl
#            docker: ghcr.io/napi-rs/napi-rs/nodejs-rust:lts-alpine
#            build: set -e && yarn build && strip ./*.node

          - output_name: linux-arm64-musl
            host: ubuntu-latest
            target: aarch64-unknown-linux-musl
            docker: ghcr.io/napi-rs/napi-rs/nodejs-rust:lts-alpine
            build: |-
              set -e &&
              rustup target add aarch64-unknown-linux-musl &&
              yarn build --target aarch64-unknown-linux-musl &&
              /aarch64-linux-musl-cross/bin/aarch64-linux-musl-strip ./*.node

          - output_name: linux-arm64-gnu
            host: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            docker: ghcr.io/napi-rs/napi-rs/nodejs-rust:lts-debian-aarch64
            build: |-
              set -e &&
              yarn build --target aar 

          - output_name: linux-arm-gnueabihf
            host: ubuntu-latest
            target: armv7-unknown-linux-gnueabihf
            setup: |
              sudo apt-get update
              sudo apt-get install gcc-arm-linux-gnueabihf -y
            build: |
              yarn build --target armv7-unknown-linux-gnueabihf
              arm-linux-gnueabihf-strip ./*.node

          # TODO: linux-arm-gnueabihf
          # TODO: freebsd-x64
    name: stable - ${{ matrix.settings.target }} - node@18
    runs-on: ${{ matrix.settings.host }}
    defaults:
      run:
        shell: bash
    steps:
      - uses: actions/checkout@v3
      - name: Setup node
        uses: actions/setup-node@v3
        if: ${{ !matrix.settings.docker }}
        with:
          node-version: 18
          check-latest: true
          cache: yarn
      - name: Install
        uses: dtolnay/rust-toolchain@stable
        if: ${{ !matrix.settings.docker }}
        with:
          toolchain: stable
          targets: ${{ matrix.settings.target }}
      - name: Cache cargo
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            .cargo-cache
            target/
          key: ${{ matrix.settings.target }}-cargo-${{ matrix.settings.host }}
      - uses: goto-bus-stop/setup-zig@v2
        if: ${{ matrix.settings.target == 'armv7-unknown-linux-gnueabihf' }}
        with:
          version: 0.10.1
      - name: Setup toolchain
        run: ${{ matrix.settings.setup }}
        if: ${{ matrix.settings.setup }}
      - name: Setup node x86
        if: matrix.settings.target == 'i686-pc-windows-msvc'
        run: yarn config set supportedArchitectures.cpu "ia32"
      - name: Install dependencies
        run: yarn install
      - name: Setup node x86
        uses: actions/setup-node@v3
        if: matrix.settings.target == 'i686-pc-windows-msvc'
        with:
          node-version: 18
          check-latest: true
          cache: yarn
          architecture: x86
      - name: Build in docker
        uses: addnab/docker-run-action@v3
        if: ${{ matrix.settings.docker }}
        with:
          image: ${{ matrix.settings.docker }}
          options: "--user 0:0 -v ${{ github.workspace }}/.cargo-cache/git/db:/usr/local/cargo/git/db -v ${{ github.workspace }}/.cargo/registry/cache:/usr/local/cargo/registry/cache -v ${{ github.workspace }}/.cargo/registry/index:/usr/local/cargo/registry/index -v ${{ github.workspace }}:/build -w /build"
          run: ${{ matrix.settings.build }}
      - name: Build
        run: ${{ matrix.settings.build }}
        if: ${{ !matrix.settings.docker }}
      - name: Get Package Version
        run: echo "JS_PACKAGE_VERSION=$(node -p 'require(require("path").resolve(__dirname, "package.json")).version')" >> $GITHUB_ENV
      - name: Rename artifact
        run: mv ${{ env.APP_NAME }}.node ${{ env.APP_NAME}}-v${{ env.JS_PACKAGE_VERSION }}-${{ matrix.settings.output_name}}.node
      - name: Upload artifact
        run: gh release upload v${{ env.JS_PACKAGE_VERSION }} ${{ env.APP_NAME}}-v${{ env.JS_PACKAGE_VERSION }}-${{ matrix.settings.output_name}}.node --clobber
        env:
          GH_TOKEN: ${{ github.token }}

