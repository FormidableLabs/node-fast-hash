name: CI
env:
  DEBUG: napi:*
  APP_NAME: node-fast-sha
  MACOSX_DEPLOYMENT_TARGET: "10.13"
permissions:
  contents: write
  id-token: write
"on":
  push:
    branches:
      - main
    tags-ignore:
      - "**"
    paths-ignore:
      - "**/*.md"
      - LICENSE
      - "**/*.gitignore"
      - .editorconfig
      - docs/**
  pull_request: null
  workflow_dispatch:

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        settings:
#          - host: macos-latest
#            target: x86_64-apple-darwin
#            output_suffix: darwin-x64
#            build: |
#              yarn build
#              strip -x *.node
#          - host: windows-latest
#            build: yarn build
#            target: x86_64-pc-windows-msvc
          - host: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            docker: ghcr.io/napi-rs/napi-rs/nodejs-rust:lts-debian
            output_suffix: linux-x64-gnu
            build: |-
              set -e &&
              yarn build --target x86_64-unknown-linux-gnu &&
              strip *.node
    name: stable - ${{ matrix.settings.target }} - node@18
    runs-on: ${{ matrix.settings.host }}
    steps:
      - uses: actions/checkout@v3
      - name: Setup node
        uses: actions/setup-node@v3
        if: ${{ !matrix.settings.docker }}
        with:
          node-version: 18
          check-latest: true
          cache: yarn
      - name: Install
        uses: dtolnay/rust-toolchain@stable
        if: ${{ !matrix.settings.docker }}
        with:
          toolchain: stable
          targets: ${{ matrix.settings.target }}
      - name: Cache cargo
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            .cargo-cache
            target/
          key: ${{ matrix.settings.target }}-cargo-${{ matrix.settings.host }}
      - uses: goto-bus-stop/setup-zig@v2
        if: ${{ matrix.settings.target == 'armv7-unknown-linux-gnueabihf' }}
        with:
          version: 0.10.1
      - name: Setup toolchain
        run: ${{ matrix.settings.setup }}
        if: ${{ matrix.settings.setup }}
        shell: bash
      - name: Setup node x86
        if: matrix.settings.target == 'i686-pc-windows-msvc'
        run: yarn config set supportedArchitectures.cpu "ia32"
        shell: bash
      - name: Install dependencies
        run: yarn install
      - name: Setup node x86
        uses: actions/setup-node@v3
        if: matrix.settings.target == 'i686-pc-windows-msvc'
        with:
          node-version: 18
          check-latest: true
          cache: yarn
          architecture: x86
      - name: Build in docker
        uses: addnab/docker-run-action@v3
        if: ${{ matrix.settings.docker }}
        with:
          image: ${{ matrix.settings.docker }}
          options: "--user 0:0 -v ${{ github.workspace }}/.cargo-cache/git/db:/usr/local/cargo/git/db -v ${{ github.workspace }}/.cargo/registry/cache:/usr/local/cargo/registry/cache -v ${{ github.workspace }}/.cargo/registry/index:/usr/local/cargo/registry/index -v ${{ github.workspace }}:/build -w /build"
          run: ${{ matrix.settings.build }}
      - name: Build
        run: ${{ matrix.settings.build }}
        if: ${{ !matrix.settings.docker }}
        shell: bash
      - name: Set env
        # TODO: This needs to be from package.json
        run: echo "v0.0.1" >> $GITHUB_ENV
      - name: Rename executable
        run: mv node-fast-sha.node ${{ env.APP_NAME}}-v${{ env.RELEASE_VERSION }}-${{ matrix.settings.target}}.node
        shell: bash
      - name: Upload artifact
        run: gh release upload ${{ env.RELEASE_VERSION }} ${{ env.APP_NAME}}-v${{ env.RELEASE_VERSION }}-${{ matrix.settings.target}}.node --clobber
        env:
          GH_TOKEN: ${{ github.token }}


#      - name: Upload artifact
#        uses: actions/upload-artifact@v3
#        with:
#          name: ${{ env.APP_NAME }}.${{ matrix.settings.output_suffix }}.node
#          path: ${{ env.APP_NAME }}.*.node
#          if-no-files-found: error
#  publish:
#    name: Publish
#    runs-on: ubuntu-latest
#    needs:
#      - build
#    steps:
#      - uses: actions/checkout@v3
#      - name: Setup node
#        uses: actions/setup-node@v3
#        with:
#          node-version: 18
#          check-latest: true
#          cache: yarn
#      - name: Install deps
#        run: yarn install
#      - name: Download all artifacts
#        uses: actions/download-artifact@v3
#        with:
#          path: .
#      - name: Test a thing
#        shell: bash
#        run: ls -al
#      - name: PR or Publish
#        id: changesets
#        uses: changesets/action@v1
#        with:
#          version: yarn run version
#          publish: yarn run changeset publish
#        env:
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
